from brian import *
from time import time
stdp_gmax10000.0
conn2_init_weight5.0
spike_times_iter_stdp[[],[],[]]
conn1_init_weight3.0
stdp_tau10.0
stdp1_a_step1.0
dt_1.0
sim_dur_stdp500.0
stdp2_a_step1.0
nw_arch[32,20,3]
#
#

k=0.571/ms/mV
a=0.13
b=-2.714
d=111.506
C=81.2
vR=-60.5*mV
vT=-34.8*mV
vPeak=42.4*mV
c=-60.0*mV
Is=0

model9pEqs= Equations('''
		dV/dt=(k*((V-vR)*(V-vT))-U+I)/(C) : volt
		dU/dt=a*((b*(V-vR)/ms/ms)-(U/ms)) : volt/second
		I : mV/ms
		''')

eqs_stdp='''
dA_pre/dt=-A_pre/stdp_tau : 1
dA_post/dt=-A_post/stdp_tau : 1
'''

simclock = Clock(dt=dt_*ms)
spikeTimes = [(i, t*ms) for i in xrange(len(spike_times_iter_stdp)) for t in spike_times_iter_stdp[i]]

inputLayer = SpikeGeneratorGroup(nw_arch[0], spikeTimes, clock=simclock)
hiddenLayer = NeuronGroup(nw_arch[1], model=model9pEqs, threshold="V>vPeak", reset="V=c;U+=d", method= "RK", clock=simclock)
outputLayer = NeuronGroup(nw_arch[2], model=model9pEqs, threshold="V>vPeak", reset="V=c;U+=d", method= "RK", clock=simclock)
hiddenLayer.V = vR 
hiddenLayer.U =0
outputLayer.V = vR 
outputLayer.U =0

conn1 = Connection(inputLayer, hiddenLayer, 'V', weight=conn1_init_weight*mV, sparseness=1)
conn2 = Connection(hiddenLayer, outputLayer, 'V', weight=conn2_init_weight*mV, sparseness=1)
stdp1=STDP(conn1,eqs=eqs_stdp,pre='A_pre+=stdp1_a_step*mV;w+=A_post',post='A_post+=stdp1_a_step*mV;w+=A_pre',wmax=stdp_gmax, clock=simclock)
stdp2=STDP(conn2,eqs=eqs_stdp,pre='A_pre+=stdp2_a_step*mV;w+=A_post',post='A_post+=stdp2_a_step*mV;w+=A_pre',wmax=stdp_gmax, clock=simclock)
SMO = SpikeMonitor(outputLayer)

t1 = time()
run(simDur*ms)
t2 = time()
print "Simulation time:", t2 - t1, "s"
print "Output Layer Spike times:"
for i in xrange(0, nw_arch[len(n)-1]):
	print str(SMO[i])
